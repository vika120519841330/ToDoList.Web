@page "/"
@rendermode InteractiveServer
@using ToDoList.Web.Components.Pages.Base
@using ToDoList.Web.Data.DTO
@using ToDoList.Web.Helpers
@using ToDoList.Web.Services
@inherits ComponentBaseClass<ToDoItemFullModel>
@inject ToDoItemService toDoService
@inject PriorityService priorityService
@inject UserService userService

<PageTitle>Список задач</PageTitle>

@if (!IsRender)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="flexRow">
        <div>
            <TSearchComponent T="@PriorityModel"
                              Items="@Priorities"
                              KeyPropInfo="@(typeof(PriorityModel).GetProperty(nameof(PriorityModel.Id)))"
                              ValuePropInfo="@(typeof(PriorityModel).GetProperty(nameof(PriorityModel.Level)))"
                              InitParameters="@Priorities"
                              LabelForSearch="Приоритет"
                              IsRenderLabelForSearch="true"
                              SendSelectedItems="@((List<PriorityModel> selectedItems) => ReactOnPrioritiesSelected(selectedItems))" />
        </div>
        <div>
            <TSearchComponent T="@UserModel"
                              Items="@Users"
                              KeyPropInfo="@(typeof(UserModel).GetProperty(nameof(UserModel.Id)))"
                              ValuePropInfo="@(typeof(UserModel).GetProperty(nameof(UserModel.Name)))"
                              InitParameters="@Users"
                              LabelForSearch="Пользователь"
                              IsRenderLabelForSearch="true"
                              SendSelectedItems="@((List<UserModel> selectedItems) => ReactOnUsersSelected(selectedItems))" />
        </div> 
</div>
    <table class="table">
        <thead>
            <tr>
                <th>@ModelType.GetDisplayValue(nameof(ToDoItemFullModel.Id))</th>
                <th>@ModelType.GetDisplayValue(nameof(ToDoItemFullModel.Title))</th>
                <th>@ModelType.GetDisplayValue(nameof(ToDoItemFullModel.Description))</th>
                <th>@ModelType.GetDisplayValue(nameof(ToDoItemFullModel.DueDate))</th>
                <th>@ModelType.GetDisplayValue(nameof(ToDoItemFullModel.PriorityValue))</th>
                <th>@ModelType.GetDisplayValue(nameof(ToDoItemFullModel.UserName))</th>
                <th>@ModelType.GetDisplayValue(nameof(ToDoItemFullModel.IsCompleted))</th>
                <th colspan="2">Действия</th>
            </tr>
        </thead>
        <tbody>
            @if (!ToDoItemsFiltered.Any())
            {
                <tr>
                    <td colspan="9">Задачи осутствуют</td>
                </tr>
            }
            @foreach (var toDoItem in ToDoItemsFiltered ?? new())
            {
                var item = toDoItem;
                var deleteId = item.Id + "delete_btn_id";
                var updId = item.Id + "upd_btn_id";
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Title</td>
                    <td>@item.Description</td>
                    <td>@item.DueDate.ToShortDateString()</td>
                    <td>@item.PriorityValue</td>
                    <td>@item.UserName</td>
                    <td>@if(item.IsCompleted)
                        {
                            <input type="checkbox" checked disabled/>
                        }
                        else
                        {
                            <input type="checkbox" disabled />
                        }
                    </td>
                    <td>
                        <button class="btn btn-primary"
                                id="@updId"
                                @onclick="@(() => { SelectedToDoItem = item; 
                                                    Title = "Редактирование";
                                                    ShowEditForm = true; })">
                            Редактировать
                        </button>
                    </td>
                    <td>
                        <button class="btn btn-primary"
                                id="@deleteId"
                                @onclick="@(() => { SelectedToDoItem = item; 
                                                    Message = "Вы подтверждаете удаление ";
                                                    Title = "Удаление"; 
                                                    ShowDeleteConfarmation = true; })">
                            Удалить
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (ShowEditForm)
    {
        <ModalWindow Title="@Title"
                     InvokeParent="@(() => { ShowEditForm = false; })">
                 
        </ModalWindow>
    }

    @if (ShowDeleteConfarmation)
    {
        <ModalWindow Title="@Title"
                     InvokeParent="@(() => { ShowDeleteConfarmation = false; })">
            <div>Вы подтверждаете удаление задачи? </div>
            <br />
            <div>
                <button type="button"
                        @onclick="@(async() => await DeleteItem())">
                    Удалить
                </button>
            </div>
        </ModalWindow>
    }

    @if (ShowActionResult)
    {
        <ModalWindow Title="@Title"
                     InvokeParent="@(() => { SelectedToDoItem = null; ShowActionResult = false; })">
            <div>@Message</div>
        </ModalWindow>
    }
}

@code {
    private List<ToDoItemFullModel> ToDoItems { get; set; } = new();

    private List<ToDoItemFullModel> ToDoItemsFiltered { get; set; } = new();

    private List<PriorityModel> Priorities { get; set; } = new();

    private List<PriorityModel> PrioritiesSelected { get; set; } = new();

    private List<UserModel> Users { get; set; } = new();

    private List<UserModel> UsersSelected { get; set; } = new();

    private ToDoItemFullModel SelectedToDoItem { get; set; }

    private bool ShowEditForm { get; set; }

    private bool ShowDeleteConfarmation { get; set; }

    private bool ShowActionResult { get; set; }

    private bool ShouldUpdate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync(); 
        await InitToDoItems();
        await InitPriorities();
        await InitUsers();
        ResetFilteredValues();
        IsRender = true;
    }

    private void ResetFilteredValues()
    {
        ToDoItemsFiltered = ToDoItems ?? new();
        PrioritiesSelected = Priorities ?? new();
        UsersSelected = Users ?? new();
    }

    private async Task InitToDoItems() => ToDoItems = await toDoService.GetListAsync(Token);

    private async Task InitPriorities() => Priorities = await priorityService.GetListAsync(Token);

    private async Task InitUsers() => Users = await userService.GetListAsync(Token);

    private async Task DeleteItem()
    {
        var result = await toDoService.DeleteAsync(SelectedToDoItem.Id, Token);

        if (result)
        {
            Title = "Результат удаления";
            Message = "Операция успешно завершена";
            ShouldUpdate = true;
        }
        else
        {
            Title = "Предупреждение";
            Message = "Операция закончилась с ошибкой";
        }

        if (ShouldUpdate) 
            await InitToDoItems();

        ShowDeleteConfarmation = false;
        ShowEditForm = false;
        ShowActionResult = true;
    }

    private void ReactOnPrioritiesSelected(List<PriorityModel> prioritiesSelected)
    {
        PrioritiesSelected = prioritiesSelected?.Any() ?? false ? prioritiesSelected : new();
        ToFilterToDoList();
    }

    private void ReactOnUsersSelected(List<UserModel> usersSelected)
    {
        UsersSelected = usersSelected?.Any() ?? false ? usersSelected : new();
        ToFilterToDoList();
    }

    private void ToFilterToDoList() => ToDoItemsFiltered = ToDoItems?.Where(item => IsVisible(item))?.ToList() ?? new();

    private bool IsVisible(ToDoItemFullModel item) => IsEquelByPriority(item) && IsEquelByUser(item);

    private bool IsEquelByPriority(ToDoItemFullModel item) => PrioritiesSelected.Any(priority => item.PriorityId == priority.Id);

    private bool IsEquelByUser(ToDoItemFullModel item) => UsersSelected.Any(user => item.UserId == user.Id);

}
